HADOOP EX 2

INPUT: 
	- path to document "historical_stock_prices.csv".
	- path to document "historical_stocks.csv".
	- path for temp result.
	- path for output result.

PRE-COND:
	- path to historical_stock_prices.csv needs to be valid.
	- path to historical_stocks.csv needs to be valid.
	- historical_stock_prices.csv needs to be a document, separated by commas, with 8 fields:
		- TICKER		String		unique share symbol
		- OPEN			Float		open price
		- CLOSE 		Float		close price
		- ADJ_CLOSE 	Float		adjusted close price
		- LOW 			Float		min price
		- HIGH 			Float		max price
		- VOLUME 		Long		number of transactions
		- DATE			Date 		date in format yyyy-mm-dd
	- historical_stocks.csv needs to be a document, separated by commas, with 8 fields:
		- TICKER		String		unique share symbol
		- EXCHANGE		String		NYSE or NASDAQ
		- NAME 			String		company name
		- SECTOR 		String		sector name
		- INDUSTRY 		String		industry name
	- temp path needs to be valid.
	- output path needs to be valid.

//("SETTORE, ANNO"), ("VOLUME_ANNUALE_MEDIO,VARIAZIONE_ANNUALE_MEDIA,QUOTAZIONE_GIORNALIERA_MEDIA"));

POST-COND:
	- output file needs to be a document, separated by commas, with 5 fields:
		- SECTOR,YEAR					String				
							Long					average "volume" in period 2008-2018
	- document rows need to be sorted by descending "VARIAZIONE_QUOTAZIONE_%" 


ex1Mapper(key, value)
		skip first row 											//header
		check_correctness_data(value)							//correct types and date in correct period
		close,volume,date <- extractRelevantValues(value)		//relevant values are "close","volume","date"
		key <- extractTicker(value)
		
		if (2008 <= date.year() && date.year() <= 2018):
			EMIT(Text ticker, Text [close_price, volume, date])


ex1Reducer(key, values)
		initialize firstClose, lastClose, firstDate, lastDate, 
				   minClose, maxClose, sumVolumes, numValues

		for each text in values:
			update firstClose, lastClose, firstDate, lastDate, 
			   	   minClose, maxClose, sumVolumes, numValues
			if(text.date < firstDate)
				firstDate = text.date
				firstClose = text.close
			if(text.date > lastDate)
				lastDate = text.date
				lastClose = text.close
			if(text.close < minClose)
				minClose = close
			if(text.close > maxClose)
				maxClose = close
			sumVolumes += text.volume
			numValues++

		percentageChange = ((lastClose - firstClose) / firstClose) * 100
		avgVolume = sumVolumes / numValues
		
		EMIT(Text "ticker", Text [percentageChange,minClose,maxClose,avgVolume])
		
		
